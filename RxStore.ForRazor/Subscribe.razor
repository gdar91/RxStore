@namespace RxStore

@using System.Reactive
@using System.Reactive.Linq
@using System.Reactive.Subjects

@inherits ReactiveComponentBase

@typeparam T


@if (valueAvailable)
{
    if (childContent != null)
    {
        @childContent(value)
    }
}


@code
{
    private readonly Subject<IObservable<T>> sourcesSubject = new Subject<IObservable<T>>();

    private readonly Subject<RenderFragment<T>> childContentsSubject =
        new Subject<RenderFragment<T>>();


    private readonly object gate = new object();

    private bool shouldRender = false;


    private bool valueAvailable = false;

    private T value;


    private RenderFragment<T> childContent;


    public Subscribe()
    {
        sourcesSubject
            .CombineLatest(Initializes, (source, initialize) => source)
            .DistinctUntilChanged()
            .Select(source =>
                source?.Catch<T, Exception>(e => Observable.Empty<T>())
                    ?? Observable.Empty<T>()
            )
            .Switch()
            .DistinctUntilChanged()
            .Select(value =>
                Observable.FromAsync(cancellationToken =>
                    InvokeAsync(() =>
                    {
                        lock (gate)
                        {
                            this.value = value;
                            valueAvailable = true;
                            shouldRender = true;
                            StateHasChanged();
                        }
                    })
                )
            )
            .Concat()
            .TakeUntil(Disposes)
            .Publish()
            .AutoConnect(0);


        childContentsSubject
            .CombineLatest(Initializes, (childContent, initialize) => childContent)
            .DistinctUntilChanged()
            .Select(childContent =>
                Observable.FromAsync(cancellationToken =>
                    InvokeAsync(() =>
                    {
                        lock (gate)
                        {
                            this.childContent = childContent;
                            shouldRender = true;
                            StateHasChanged();
                        }
                    })
                )
            )
            .Concat()
            .TakeUntil(Disposes)
            .Publish()
            .AutoConnect(0);
    }


    [Parameter]
    public IObservable<T> To { set => sourcesSubject.OnNext(value); }

    [Parameter]
    public RenderFragment<T> ChildContent { set => childContentsSubject.OnNext(value); }


    protected override bool ShouldRender()
    {
        lock (gate)
        {
            if (shouldRender)
            {
                shouldRender = false;

                return true;
            }

            return false;
        }
    }
}
