@namespace RxStoreC

@using Microsoft.FSharp.Core
@using RxStore.Entity


@typeparam T
@typeparam TError


<RxStore.Subscribe To="Of" Context="entityInfoOption">
    <ForEntityInfoOption Of="entityInfoOption">
        <WhenNone>
            @if (WhenNone != null)
            {
                @WhenNone
            }
        </WhenNone>
        <WhenPending Context="stamp">
            @if (WhenPending != null)
            {
                @WhenPending(stamp)
            }
        </WhenPending>
        <WhenFailed Context="stamp">
            @if (WhenFailed != null)
            {
                @WhenFailed(stamp)
            }
        </WhenFailed>
        <WhenSuccessful Context="stamp">
            @if (WhenSuccessful != null)
            {
                @WhenSuccessful(stamp)
            }
        </WhenSuccessful>
    </ForEntityInfoOption>
</RxStore.Subscribe>


@code
{
    [Parameter]
    public IObservable<FSharpOption<EntityInfo<T, TError>>> Of { get; set; }

    [Parameter]
    public RenderFragment WhenNone { get; set; }

    [Parameter]
    public RenderFragment<Stamp<Unit>> WhenPending { get; set; }

    [Parameter]
    public RenderFragment<Stamp<TError>> WhenFailed { get; set; }

    [Parameter]
    public RenderFragment<Stamp<T>> WhenSuccessful { get; set; }
}
