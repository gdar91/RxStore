@page "/fetchdata"
@inject HttpClient Http
@inject Store<AppState, IAppAction> Store

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

<Subscribe To="@forecasts">
    @if (context == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Temp. (C)</th>
                    <th>Temp. (F)</th>
                    <th>Summary</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var forecast in context)
                {
                    <tr>
                        <td>@forecast.Date.ToShortDateString()</td>
                        <td>@forecast.TemperatureC</td>
                        <td>@forecast.TemperatureF</td>
                        <td>@forecast.Summary</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</Subscribe>

@functions {
    IObservable<WeatherForecast[]> forecasts;

    protected override async Task OnInitAsync()
    {
        forecasts = Store.Project(state => state.WeatherForecasts);

        var loadedForecasts = await Http.GetJsonAsync<WeatherForecast[]>("sample-data/weather.json");

        Store.Dispatch(new ReceiveWeatherForecastsAction() { Forecasts = loadedForecasts });
    }
}
