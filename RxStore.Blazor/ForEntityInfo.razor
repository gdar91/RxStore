@namespace RxStoreC

@using Microsoft.FSharp.Core
@using RxStore
@using RxStore.Entity


@typeparam T
@typeparam TError


<RxStoreC.ForCompletion Of="Of.Stamp.Item">
    <WhenPending>
        @if (WhenPending != null)
        {
            @WhenPending(Stamp.MapTo(default(Unit), Of.Stamp))
        }
    </WhenPending>
    <WhenCompleted Context="result">
        <RxStoreC.ForResult Of="result">
            <WhenOk Context="value">
                @if (WhenSuccessful != null)
                {
                    @WhenSuccessful(Stamp.MapTo(value, Of.Stamp))
                }
            </WhenOk>
            <WhenError Context="message">
                @if (WhenFailed != null)
                {
                    @WhenFailed(Stamp.MapTo(message, Of.Stamp))
                }
            </WhenError>
        </RxStoreC.ForResult>
    </WhenCompleted>
</RxStoreC.ForCompletion>


@code
{
    [Parameter]
    public EntityInfo<T, TError> Of { get; set; }

    [Parameter]
    public RenderFragment<Stamp<Unit>> WhenPending { get; set; }

    [Parameter]
    public RenderFragment<Stamp<TError>> WhenFailed { get; set; }

    [Parameter]
    public RenderFragment<Stamp<T>> WhenSuccessful { get; set; }
}
